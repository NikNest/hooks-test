#!/bin/bash
# this is a git pre-commit hook that checks if source files included in the commit are correctly formatted

# merge commits are automaticaly passed
if git rev-parse --verify -q MERGE_HEAD
then
exit 0
fi

echo "Checking commit files formatting(accordind to .clang-format)..."
(
#navigate to the root directory of the git repository 
cd "$(git rev-parse --show-toplevel)" 

fail=0
wrong_formatted_files=()
has_wrong_formatted_files=0
committed_cpp_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E "^\S*(\.cpp|\.hpp|\.h|\.cpp)$")

for file in committed_cpp_files
do
  index_hash=$(git ls-files -s "$file" | awk 'print $2')
  git show "$index_hash" | clang-format -style=file -assume-filename="$file" | diff <(git show "$index_hash") - > /dev/null
  index_unformatted=$?
  clang-format -style=file "$file" | diff "$file" - > /dev/null
  wrong_formatted=$?
  if [ $wrong_formatted = 1 ]
  then
    has_wrong_formatted_files=1
    files_unformatted_in_working_tree+=("$file")
  fi
  if [ $index_unformatted = 1 ]
  then
	echo -e " \e[31mFAIL\e[0m"
	fail=1
  else
	echo -e " \e[32mclean\e[0m"
  fi
done


if [ $fail = 1 ]
then
  if [ $has_wrong_formatted_files = 1 ]
  then
    echo -e "Some files are not correcty formatted. The commit was \e[31mABORTED\e[0m.  Please format the code according to the .clang_format and commit it again."
    echo "--"
    echo "To format the Files automatically, execute the following statement:"
    echo -n "$CLANG_FORMAT -style=file -i "
    for file in "${committed_cpp_files[@]}"; do echo -n "'$(git rev-parse --show-toplevel)/$file' "; done
    echo ""
  else
     echo -e "The working tree is correctly formatted, but the index is not. The commit was \e[31mABORTED\e[0m."
     echo "You probably forgot to add the files to the index after formatting the code. Use \"git status\" to see what has changed and then add the formatted files with \"git add <file>...\" to the index."
     echo ""
  fi
fi
exit $fail
)